{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","dump","lineWidth","selection","setSelection","selectionStart","setSelectionStart","selectionEnd","setSelectionEnd","isSelecting","setIsSelecting","className","nLines","Math","ceil","length","lineElems","Array","keys","map","n","i","toString","padStart","l","key","renderOffset","handleMouseOverCell","e","cellIndex","from","target","parentNode","children","indexOf","handleCellPress","handleCellRelease","dumpCells","b","min","max","onMouseOver","onMouseDown","onMouseUp","onMouseLeave","style","gridTemplateColumns","renderDump","asciiLines","String","fromCharCode","parseInt","replace","renderAscii","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de5ae39f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [dump, setDump] = useState([\n      '89', '50', '4e', '47', '0d', '0a', '1a', '0a', '00', '00', '00', '0d', '49', '48', '44', '52',\n      '00', '00', '00', '20', '00', '00', '00', '20', '08', '06', '00', '00', '00', '73', '7a', '7a',\n      'f4', '00', '00', '07', 'cf', '49', '44', '41', '54', '58', 'c3', '4d', '97', '3d', '8f', '2c',  \n      '4b', '56', '45', 'd7', 'f9', '88', 'cc', 'ea', 'be', 'f7', '31', '48', '48', '48', 'a0', '31',  \n      '06', 'e3', '69', '40', '03', '36', 'c2', 'c0', '44', '02', '3d', '84', '01', '2e', '2e', '26',  \n      '06', '0e', '3f', '00', '17', '0b', '1f', '03', '07', '9f', 'ff', '80', '84', '8d', '0f', '12',  \n      '78', '18', 'c0', 'd3', '65', '5e', '57', '57', '66', 'c4', 'f9', 'c0', 'c8', 'ba', '0d', 'e5',  \n      '95', 'aa', '22', '23', 'ce', '39', '2b', 'f6', 'de', '29', '3f', 'fe', 'f6', '37', 'db', '7d',  \n      'a3', 'ba', '69', '15', 'ba', '1b', '55', '45', '44', '01', '68', '69', 'cc', '8c', 'ce', '40',  \n      '55', '51', '75', 'b2', '9a', '7f', 'fd', 'e7', '7f', '1a',  \n  ]);\n  const [lineWidth, setLineWidth] = useState(16);\n  const [selection, setSelection] = useState();\n  const [selectionStart, setSelectionStart] = useState();\n  const [selectionEnd, setSelectionEnd] = useState();\n  const [isSelecting, setIsSelecting] = useState(false);\n\n  const renderOffset = () => {\n    const nLines = Math.ceil(dump.length/lineWidth);\n    const lines = [ ...Array(nLines).keys()].map((n, i) => (i * lineWidth).toString(16).padStart(8, '0'));\n    const lineElems = lines.map((l, i) => {\n      return (\n        <div className=\"Offset__line\" key={i}>\n          {l}\n        </div>\n      );\n    });\n    return (\n      <div className=\"Offset\">\n        {lineElems}\n      </div>\n    );\n  };\n  const renderDump = () => {\n    const handleMouseOverCell = e => {\n      const cellIndex = Array.from(e.target.parentNode.children).indexOf(e.target)\n      setSelection(cellIndex);\n      if (isSelecting) {\n        setSelectionEnd(cellIndex);\n      }\n    };\n    const handleCellPress = e => {\n      setSelectionEnd(null);\n      setSelectionStart(selection);\n      setIsSelecting(true);\n    };\n    const handleCellRelease = e => {\n      setSelectionEnd(selection);\n      setIsSelecting(false);\n    };\n    const dumpCells = dump.map((b, i) => {\n      return (\n        <div\n          className={`Dump__cell ${(i === selection) || (selectionEnd && i >= Math.min(selectionStart, selectionEnd) && i <= Math.max(selectionStart, selectionEnd)) ? 'Dump__cell--selected' : ''}`}\n          onMouseOver={handleMouseOverCell}\n          onMouseDown={handleCellPress}\n          onMouseUp={handleCellRelease}\n          onMouseLeave={() => {setSelection(null)}}\n          key={i}\n        >\n          {b}\n        </div>\n      );\n    });\n    return (\n      <div\n        className=\"Dump\"\n        style={{gridTemplateColumns: `repeat(${lineWidth}, 1fr)`}}\n      >\n        {dumpCells}\n      </div>\n    );\n  };\n  const renderAscii = () => {\n    const handleMouseOverCell = e => {\n      const cellIndex = Array.from(e.target.parentNode.children).indexOf(e.target)\n      setSelection(cellIndex);\n      if (isSelecting) {\n        setSelectionEnd(cellIndex);\n      }\n    };\n    const handleCellPress = e => {\n      setSelectionEnd(null);\n      setSelectionStart(selection);\n      setIsSelecting(true);\n    };\n    const handleCellRelease = e => {\n      setSelectionEnd(selection);\n      setIsSelecting(false);\n    };\n\n    const ascii = dump.map(b => {\n      const formatted = String.fromCharCode(parseInt(b, 16));\n      return formatted.replace(/[^ -~]+/g, '.');\n    });\n\n    const asciiLines = ascii.map((l, i) => {\n      return (\n        <div\n          className={`Ascii__cell ${(i === selection) || (selectionEnd && i >= Math.min(selectionStart, selectionEnd) && i <= Math.max(selectionStart, selectionEnd)) ? 'Ascii__cell--selected' : ''}`}\n          onMouseOver={handleMouseOverCell}\n          onMouseDown={handleCellPress}\n          onMouseUp={handleCellRelease}\n          onMouseLeave={() => {setSelection(null)}}\n          key={i}\n        >\n          {l}\n        </div>\n      );\n    });\n    return (\n      <div\n        className=\"Ascii\"\n        style={{gridTemplateColumns: `repeat(${lineWidth}, 1fr)`}}\n      >\n        {asciiLines}\n      </div>\n    );\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"HexViewer\">\n        <div className=\"HexViewer__data\">\n          {renderOffset()}\n          {renderDump()}\n          {renderAscii()}\n        </div>\n        <div>Selection start: {selectionStart}</div>\n        <div>Selection end: {selectionEnd}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}